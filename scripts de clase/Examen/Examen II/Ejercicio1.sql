SET SERVEROUTPUT ON;

--FUNCION COMPROBANTE DE LA EXISTENCIA DE UN EMPLEADO
CREATE OR REPLACE FUNCTION FN_VER_EMPLEADO_20181005735( ID_EMPLEADO NUMBER)
RETURN NUMBER
IS
    EXISTE NUMBER;
BEGIN

    SELECT COUNT(*)INTO EXISTE FROM EMPLEADOS WHERE EMPLEADOID = ID_EMPLEADO;

    RETURN EXISTE;
END;
/

--FUNCION COMPROBANTE DE LA EXISTENCIA DE UN CLIENTE
CREATE OR REPLACE FUNCTION FN_VER_CLIENTE_20181005735( ID_CLIENTE NUMBER)
RETURN NUMBER
IS
    EXISTE NUMBER;
BEGIN

    SELECT COUNT(*)INTO EXISTE FROM CLIENTES WHERE CLIENTEID = ID_CLIENTE;

    RETURN EXISTE;
END;
/

--FUNCION COMPROBANTE DE LA EXISTENCIA DE UN PRODUCTO
CREATE OR REPLACE FUNCTION FN_VER_PRODUCTO_20181005735( ID_PRODUCTO NUMBER)
RETURN NUMBER
IS
    EXISTE NUMBER;
BEGIN

    SELECT COUNT(*) INTO EXISTE FROM PRODUCTOS WHERE PRODUCTOID = ID_PRODUCTO;

    RETURN EXISTE;
END;
/


--CREACION PROCEDIMIENTO ALMACENADO PARA LA CREACION DE UNA NUEVA ORDEN
CREATE OR REPLACE PROCEDURE SP_INSERTAR_ORDEN_20181005735(
    EMPLEADOID ORDENES.EMPLEADOID%TYPE,
    CLIENTEID ORDENES.CLIENTEID%TYPE,
    FECHAORDEN ORDENES.FECHAORDEN%TYPE,
    DESCUENTO ORDENES.DESCUENTO%TYPE,
    PRODUCTOID DETALLE_ORDENES.PRODUCTOID%TYPE,
    CANTIDAD DETALLE_ORDENES.CANTIDAD%TYPE,
    MSJ OUT NUMBER,
    ERROR_DETALLE OUT VARCHAR2
)
IS
    FECHA_MINIMA DATE;
    VALIDO NUMBER := 0;

    LLAVE_ORDEN NUMBER;
    LLAVE_DETALLES NUMBER;
BEGIN
    MSJ:=0;

    --COMPROBANTE EMPLEADO
    IF (FN_VER_EMPLEADO_20181005735(EMPLEADOID) = 1) THEN
        VALIDO := VALIDO + 1; 
    ELSE
        ERROR_DETALLE:= 'LA LLAVE DEL EMPLEADO NO EXISTE';  
    END IF;

    --COMPROBANTE CLIENTE
    IF (FN_VER_CLIENTE_20181005735(CLIENTEID) = 1) THEN
        VALIDO := VALIDO + 1;   
    ELSE
        ERROR_DETALLE:= 'LA LLAVE DEL CLIENTE NO EXISTE';
    END IF;


    --COMPROBANTE PRODUCTO
    IF (FN_VER_PRODUCTO_20181005735(PRODUCTOID) = 1) THEN
        VALIDO := VALIDO + 1;   
    ELSE
        ERROR_DETALLE:= 'LA LLAVE DEL PRODUCTO NO EXISTE';
    END IF;
    

    --COMPROBANTE FECHA
    FECHA_MINIMA := TO_DATE('2020-01-01', 'YYYY-MM-DD');
    IF (FECHAORDEN > FECHA_MINIMA) THEN
        VALIDO := VALIDO + 1;   
    ELSE
        ERROR_DETALLE:= 'LA FECHA NO CUMPLE CON LOS REQUIISTOS';
    END IF;

    
    --CONSEGUIR LAS LLAVES DE CADA TABLA
    SELECT MAX(ORDENID) + 1 INTO LLAVE_ORDEN FROM ORDENES;
    SELECT MAX(DETALLEID) + 1 INTO LLAVE_DETALLES FROM DETALLE_ORDENES;
    

    --INSERTAR PRODUCTOS 
    IF VALIDO = 4 THEN
        INSERT INTO ORDENES VALUES (
            LLAVE_ORDEN,
            EMPLEADOID,
            CLIENTEID,
            FECHAORDEN,
            DESCUENTO
        );

        INSERT INTO DETALLE_ORDENES VALUES (
            LLAVE_ORDEN,
            LLAVE_DETALLES,
            PRODUCTOID,
            CANTIDAD
        );

        COMMIT;       
        MSJ:=1;
    END IF;

    EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        MSJ:=2;
    
END;
/


DECLARE
  MSJ NUMBER;
  DETALLE_ERROR VARCHAR2(50);
BEGIN 
    SP_INSERTAR_ORDEN_20181005735(
        7,
        10,
        TO_DATE('2020-07-20', 'YYYY-MM-DD'),
        10,
        13,
        3,
        MSJ,
        DETALLE_ERROR
    );


    IF (MSJ = 0) THEN
        DBMS_OUTPUT.PUT_LINE('ERROR CON PARAMETROS: ' || DETALLE_ERROR);
    ELSIF (MSJ = 1) THEN
        DBMS_OUTPUT.PUT_LINE('LA ORDEN FUE INSERTADA');
    ELSIF (MSJ = 2) THEN
        DBMS_OUTPUT.PUT_LINE('SURGIO UN ERROR CUANDO SE INTENTO INSERTAR LA ORDEN');
    END IF;
END;
/


