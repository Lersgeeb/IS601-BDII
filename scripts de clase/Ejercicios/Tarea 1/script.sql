-- ESTUDIANTE: Gabriel Enrique Escobar Banegas
-- # CUENTA: 20181005735
-- CLASE: Base de datos II
-- SECCION: 0900


SET SERVEROUTPUT ON;

----------------------------- EJERCICIO 1 ------------------------------------

-- Creación de secuencias para las tablas
CREATE SEQUENCE SQ_REGIONS
START WITH 20
INCREMENT BY 2;

CREATE SEQUENCE SQ_COUNTRIES
START WITH 20
INCREMENT BY 2;

CREATE SEQUENCE SQ_LOCATIONS
START WITH 20
INCREMENT BY 2;

CREATE SEQUENCE SQ_DEPARTMENTS
START WITH 20
INCREMENT BY 2;

CREATE SEQUENCE SQ_EMPLOYEES
START WITH 20
INCREMENT BY 2;

CREATE SEQUENCE SQ_JOBS
START WITH 20
INCREMENT BY 2;

--- PRUEBAS DE INSERTADO

--REGIONS
INSERT INTO REGIONS VALUES (SQ_REGIONS.NEXTVAL ,'AUSTRALIA'); -- ID 20
INSERT INTO REGIONS VALUES (SQ_REGIONS.NEXTVAL ,'SOUTH AMERICA'); -- ID 22

--COUNTRIES
INSERT INTO COUNTRIES VALUES (SQ_COUNTRIES.NEXTVAL, 'BRASIL', 20 );
INSERT INTO COUNTRIES VALUES (SQ_COUNTRIES.NEXTVAL, 'ARGENTINA', 20 );

--LOCATIONS
INSERT INTO LOCATIONS VALUES (SQ_LOCATIONS.NEXTVAL, 'AEF553 AVE', '11011', 'BUENOS AIRES', 'LA PLATA', 22);
INSERT INTO LOCATIONS VALUES (SQ_LOCATIONS.NEXTVAL, 'AEF553 AVE', '10111', 'RIO DE JANEIRO', 'NOVA IGUACU', 20);

--DEPARTMENTS

-- VALOR 20 - VALOR SIGUIENTE 22
SELECT SQ_DEPARTMENTS.NEXTVAL FROM DUAL;  -- SALTAR AL SIGUIENTE VALOR
INSERT INTO DEPARTMENTS VALUES (SQ_DEPARTMENTS.NEXTVAL, 'OPERATIONS', 100 , 20); 
INSERT INTO DEPARTMENTS VALUES (SQ_DEPARTMENTS.NEXTVAL, 'RESEARCH', 101 , 22); 

--JOB
INSERT INTO JOBS VALUES (SQ_JOBS.NEXTVAL, 'DATA ANALYST', 12000 , 20000); 
INSERT INTO JOBS VALUES (SQ_JOBS.NEXTVAL, 'SECURITY', 8000 , 14000); 


--EMPLOYEES
INSERT INTO EMPLOYEES VALUES (SQ_EMPLOYEES.NEXTVAL, 'JOSUE', 'JIMENEZ', 'jimenez.josue@gmail.com', '88218821', SYSDATE , 20, 13000, NULL, 101, 24); 
INSERT INTO EMPLOYEES VALUES (SQ_EMPLOYEES.NEXTVAL, 'ALEJANDRO', 'CRUZ', 'cruz.alejandro@gmail.com', '88117811', SYSDATE,  22, 10000, NULL, 100, 22);  

----------------------------- EJERCICIO 2 ------------------------------------

DECLARE
    TYPE FILA IS RECORD(
        JOB_ID  JOBS.JOB_ID%TYPE,
        JOB_TITLE JOBS.JOB_TITLE%TYPE,
        MIN_SALARY JOBS.MIN_SALARY%TYPE,
        MAX_SALARY JOBS.MAX_SALARY%TYPE,
        DEPARTMENT_ID DEPARTMENTS.DEPARTMENT_ID%TYPE,
        DEPARTMENT_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE,
        START_DATE JOB_HISTORY.START_DATE%TYPE,
        END_DATE JOB_HISTORY.END_DATE%TYPE,
        FULL_NAME VARCHAR(45)
    );
    TYPE TABLA_EMPLEADO IS TABLE OF FILA INDEX BY PLS_INTEGER;
    DATOS_EMPLEADOS TABLA_EMPLEADO;
    ITERACION NUMBER(10) := 0;

BEGIN 
    SELECT 
    JOBS.JOB_ID, 
    JOBS.JOB_TITLE,
    JOBS.MIN_SALARY, 
    JOBS.MAX_SALARY, 
    DEPARTMENTS.DEPARTMENT_ID, 
    DEPARTMENTS.DEPARTMENT_NAME,
    JOB_HISTORY.START_DATE, 
    JOB_HISTORY.END_DATE,
    (EMPLOYEES.FIRST_NAME || ' ' || EMPLOYEES.LAST_NAME)
    BULK COLLECT INTO DATOS_EMPLEADOS
    FROM EMPLOYEES 
    LEFT JOIN JOBS ON EMPLOYEES.JOB_ID = JOBS.JOB_ID 
    LEFT JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
    LEFT JOIN JOB_HISTORY ON EMPLOYEES.EMPLOYEE_ID = JOB_HISTORY.EMPLOYEE_ID  ;
  
  
    WHILE  (ITERACION<SQL%ROWCOUNT) LOOP
        DBMS_OUTPUT.PUT_LINE(' ');
        DBMS_OUTPUT.PUT_LINE('--------------------------- Empleado ' || (ITERACION+1) || ' ---------------------------------');
        DBMS_OUTPUT.PUT_LINE('EL CODIGO DEL TRABAJO ES: ' || DATOS_EMPLEADOS(ITERACION+1).JOB_ID);
        DBMS_OUTPUT.PUT_LINE('EL TITULO DEL TRABAJO ES: ' || DATOS_EMPLEADOS(ITERACION+1).JOB_TITLE);
        DBMS_OUTPUT.PUT_LINE('EL SALARIO MINIMO DEL TRABAJO ES: ' || DATOS_EMPLEADOS(ITERACION+1).MIN_SALARY);
        DBMS_OUTPUT.PUT_LINE('EL SALARIO MAXIMO DEL TRABAJO ES: ' || DATOS_EMPLEADOS(ITERACION+1).MAX_SALARY);
        DBMS_OUTPUT.PUT_LINE('EL CODIGO DEL DEPARTAMENTO: ' || DATOS_EMPLEADOS(ITERACION+1).DEPARTMENT_ID);
        DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL DEPARTAMENTO ES: ' || DATOS_EMPLEADOS(ITERACION+1).DEPARTMENT_NAME);
        DBMS_OUTPUT.PUT_LINE('LA FECHA DE INICIO DEL EMPLEADO ES: ' || DATOS_EMPLEADOS(ITERACION+1).START_DATE);
        DBMS_OUTPUT.PUT_LINE('LA FECHA DE FINALIZACION DEL EMPLEADO ES: ' || DATOS_EMPLEADOS(ITERACION+1).END_DATE);
        DBMS_OUTPUT.PUT_LINE('EL NOMBRE COMPLETO DEL EMPLEADO ES: ' || DATOS_EMPLEADOS(ITERACION+1).FULL_NAME);
        DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------------------------');
        ITERACION:=ITERACION+1;
        
    END LOOP;

END;
/


----------------------------- EJERCICIO 3 ------------------------------------

-- CREAT TABLA DE REGISTRO
CREATE TABLE REGISTRO_LOGS(
    ID_LOG NUMBER PRIMARY KEY,
    FECHA_LOG TIMESTAMP,
    DESCRIPCION_LOG VARCHAR2(200),
    USUARIO VARCHAR2(50),
    TIPO_OPERACION VARCHAR2(50),
    TABLA_AFECTADA  VARCHAR2(200)
);
/

-- CREAR SECUENCIA PARA LA LLAVE PRIMARIA DE LA TABLA DE REGISTRO
CREATE SEQUENCE SQ_REGITRO_LOGS
START WITH 1
INCREMENT BY 3;
/

-- TRIGGER QUE ASIGNA LA LLAVE PRIMARIA UNICA A CADA FILA DEL REGISTRO
CREATE OR REPLACE TRIGGER TG_REGISTRO_LOG_PK
BEFORE INSERT ON REGISTRO_LOGS
FOR EACH ROW
BEGIN
    :NEW.ID_LOG := SQ_REGITRO_LOGS.NEXTVAL;
END;
/


------------------------------------EJERCICIO 4 ----------------------------------
--TRIGGER 1
CREATE OR REPLACE TRIGGER TG_EMP_INSERT --CAMBIAR NOMBRE (NO ES ERROR)
AFTER INSERT ON EMPLOYEES
FOR EACH ROW
DECLARE
    -- TRANSACCION AUTONOMA
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN

    -- DEFINIR LA ESTRUCTURA DE LOS DATOS DE ENTRADA 
    INSERT INTO REGISTRO_LOGS 
    (   
        FECHA_LOG,
        DESCRIPCION_LOG,
        USUARIO,
        TIPO_OPERACION,
        TABLA_AFECTADA
    ) 
    VALUES (
        SYSDATE, 
        'SE INSERTÓ UN NUEVO REGISTRO EN LA TABLA EMPLEADOS', 
        USER, 
        'INSERT', 
        'EMPLEADOS'
    );

    COMMIT;

    EXCEPTION 
        WHEN OTHERS THEN  -- AGREGAR CONDICION DE EXCEPCIONES
            ROLLBACK;
END;
/

-- TRIGGER 2
CREATE OR REPLACE TRIGGER TG_DEPTS_UPDATE  --CAMBIAR NOMBRE (NO ES ERROR)
BEFORE UPDATE ON DEPARTMENTS -- CAMBIAR TABLA
FOR EACH ROW
BEGIN

    INSERT INTO REGISTRO_LOGS
    (
        FECHA_LOG,
        DESCRIPCION_LOG,
        USUARIO,
        TIPO_OPERACION,
        TABLA_AFECTADA
    ) 
    VALUES (
        SYSDATE, 
        'SE ACTUALIZÓ UN REGISTRO EN LA TABLA DEPARTMENTS', 
        USER, -- CORECCION DE FUNCION
        'UPDATE', 
        'DEPARTMENTS'
    );
    -- SE AGREGO COMILLAS EN ALGUNOS VALORES
END;
/

-- TRIGGER 3
CREATE OR REPLACE TRIGGER TG_JOB_HISTORY_DELETE  --CAMBIAR NOMBRE (NO ES ERROR)
BEFORE DELETE ON JOB_HISTORY
FOR EACH ROW
BEGIN
    INSERT INTO REGISTRO_LOGS 
    (
        FECHA_LOG, 
        DESCRIPCION_LOG, 
        USUARIO, 
        TIPO_OPERACION, 
        TABLA_AFECTADA
    ) 
    VALUES (
        SYSDATE,
        'SE ELIMINÓ UN REGISTRO EN LA TABLA JOBS_HISTORY',
        USER, -- CORECCION DE FUNCION
        'DELETE', 
        'JOB_HISTORY'
    );
    -- SE AGREGO COMILLAS EN ALGUNOS VALORES
END;
/


-- PRUEBAS DE INSERT, UPDATE y DELETE
INSERT INTO EMPLOYEES VALUES (SQ_EMPLOYEES.NEXTVAL, 'SUE', 'JINEZ', 'menez.josue@gmail.com', '88298881', SYSDATE , 'ST_CLERK', 13000, NULL, 100, 90); 
UPDATE DEPARTMENTS SET DEPARTMENT_NAME = 'TECH INFORMATION' WHERE DEPARTMENT_ID=60; 
DELETE FROM JOB_HISTORY WHERE EMPLOYEE_ID = 200;